permissions:
  - '*'
sessions:
  expose:
    redirect: true

app:
  target: inputs.pwrl_host.resource

jobs:
  auth:
    steps:
      - name: Authenticate kubectl
        run: pw kube auth ${{ inputs.cluster }}
  k8s_deployment:
    needs:
      - auth
    steps:
      - name: Defining App Name
        run: |
          job_number=$(pwd | rev | cut -d "/" -f1 | rev)
          workflow_name=$(pwd | rev | cut -d "/" -f2 | rev)
          app_name="${PW_USER}-${workflow_name}-${job_number}-$(date +%s)"
          echo "app_name=${app_name}" | tee -a $OUTPUTS
      - name: Creating Deployment and Service YAML
        run: |
          cat <<EOF > app.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ needs.k8s_deployment.outputs.app_name }}
            namespace: ${{ inputs.namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${{ needs.k8s_deployment.outputs.app_name }}
            template:
              metadata:
                labels:
                  app: ${{ needs.k8s_deployment.outputs.app_name }}
              spec:
                containers:
                  - name: ${{ needs.k8s_deployment.outputs.app_name }}
                    image: ${{ inputs.image }} 
                    ports:
                      - containerPort: ${{ inputs.k8sPort }}  # VNC port
                    env:
                      - name: VNC_PW
                        value: ${{ inputs.password }} 
                    resources:
                      limits:
                        memory: ${{ inputs.memory_limit }}  # Set shared memory to 512MB (shm-size equivalent)
                    securityContext:
                      capabilities:
                        add: ["NET_ADMIN"]  # Might be required depending on kasmvnc container usage
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ needs.k8s_deployment.outputs.app_name }}-lb
            namespace: ${{ inputs.namespace }}
          spec:
            selector:
              app: ${{ needs.k8s_deployment.outputs.app_name }}
            ports:
              - protocol: TCP
                port: ${{ inputs.k8sPort }}
                targetPort: ${{ inputs.k8sPort }} # Map to the VNC port
            type: LoadBalancer
          EOF


      - name: Dry Run Deployment
        run: |
          echo "Performing dry run..."
          kubectl apply -f app.yaml --dry-run=client
        cleanup: |
          touch cleanup.completed

      - name: Apply Deployment and Service
        run: kubectl apply -f app.yaml
        cleanup: |
          {
            kubectl delete deployment ${{ needs.k8s_deployment.outputs.app_name }} -n ${{ inputs.namespace }} --wait=true --timeout=60s
          } || {
            kubectl delete deployment ${{ needs.k8s_deployment.outputs.app_name }} -n ${{ inputs.namespace }} --force
          }
          kubectl delete svc ${{ needs.k8s_deployment.outputs.app_name }}-lb -n ${{ inputs.namespace }}
          touch cleanup.completed
      - name: Wait for Deployment to be Ready
        run: kubectl rollout status deployment/${{ needs.k8s_deployment.outputs.app_name }} -n ${{ inputs.namespace }}
      - name: Wait for Pod to be Ready
        run: |
          echo "Waiting for pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app=${{ needs.k8s_deployment.outputs.app_name }} -n ${{ inputs.namespace }} --timeout=300s
          jupyter_pod=$(kubectl get pods -n ${{ inputs.namespace }} -l app=${{ needs.k8s_deployment.outputs.app_name }} --field-selector=status.phase=Running -o jsonpath="{.items[0].metadata.name}")
          echo "jupyter_pod=$jupyter_pod" | tee -a $OUTPUTS | tee -a OUTPUTS
      - name: Wait for LoadBalancer Service to Get External IP
        run: |
          echo "Waiting for external IP..."
          while true; do
            ext_ip=$(kubectl get svc -n ${{ inputs.namespace }} ${{ needs.k8s_deployment.outputs.app_name }}-lb -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null)
            if [[ -n "$ext_ip" && "$ext_ip" != "<none>" ]]; then
              echo "External IP found: $ext_ip"
              break
            fi
            sleep 5
          done
          echo "ext_ip=$ext_ip" | tee -a $OUTPUTS | tee -a OUTPUTS
      - name: Stream Logs
        run: |
          touch ready_to_create_session
          kubectl logs -f deployment/${{ needs.k8s_deployment.outputs.app_name }} -n ${{ inputs.namespace }}

  create_session:
    needs:
      - auth
    steps:
      - name: Wait until the Kubernetes deployment reaches its final stage
        run: |
          while true; do
            if [ -f "cleanup.completed" ]; then
              echo "File cleanup.completed was detected. Exiting..."
              exit 0
            elif [ -f "ready_to_create_session" ]; then
              echo "Deployment is ready"
              break
            fi
            sleep 2  # Check every second
          done
      - name: Get URL
        run: |
          source OUTPUTS
          k8s_port="${{ inputs.k8sPort }}"
          URL="https://${ext_ip}:${k8s_port}"
          echo "URL=${URL}" | tee -a $OUTPUTS
      - name: Expose port
        uses: parallelworks/update-session
        with:
          name: ${{ sessions.expose }}
          type: link
          url: ${{ needs.create_session.outputs.URL }}


'on':
  execute:
    inputs:
      cluster:
        label: Kubernetes cluster
        type: string
        default: devinfra1
      namespace:
        type: string
        default: pw-qa-test
      image:
        label: Job image
        type: string
        default: kasmweb/desktop:1.16.0
      k8sPort:
        label: Job port
        type: number
        default: 6901
      password:
        label: Password
        type: string
        default: Password123!
        tooltip: This is the password for user kasm_user
      memory_limit:
        label: Memory Limit
        type: string
        default: 512Mi
