permissions:
  - '*'
sessions:
  expose:
    redirect: true
    prompt-for-name: 
jobs:
  auth:
    steps:
      - name: Authenticate kubectl
        run: pw kube auth ${{ inputs.cluster }}
  main:
    needs:
      - auth
    steps:
      - name: Defining App Name
        run: |
          job_number=$(pwd | rev | cut -d "/" -f1 | rev)
          workflow_name=$(pwd | rev | cut -d "/" -f2 | rev)
          app_name="${PW_USER}-${workflow_name}-${job_number}-$(date +%s)"
          echo "app_name=${app_name}" | tee -a $OUTPUTS
      - name: Creating Deployment and Service YAML
        run: |
          cat <<EOF > app.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ needs.main.outputs.app_name }}
            namespace: ${{ inputs.namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${{ needs.main.outputs.app_name }}
            template:
              metadata:
                labels:
                  app: ${{ needs.main.outputs.app_name }}
              spec:
                containers:
                  - name: ${{ needs.main.outputs.app_name }}
                    image: ${{ inputs.image }}
                    ports:
                      - containerPort: ${{ inputs.k8sPort }}
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ needs.main.outputs.app_name }}-lb
            namespace: ${{ inputs.namespace }}
          spec:
            selector:
              app: ${{ needs.main.outputs.app_name }}
            ports:
              - protocol: TCP
                port: ${{ inputs.k8sPort }}
                targetPort: ${{ inputs.k8sPort }}
            type: LoadBalancer
          EOF
      - name: Apply Deployment and Service
        run: kubectl apply -f app.yaml
        cleanup: |
          {
            kubectl delete deployment ${{ needs.main.outputs.app_name }} -n ${{ inputs.namespace }} --wait=true --timeout=60s
          } || {
            kubectl delete deployment ${{ needs.main.outputs.app_name }} -n ${{ inputs.namespace }} --force
          }
          kubectl delete svc ${{ needs.main.outputs.app_name }}-lb -n ${{ inputs.namespace }}
      - name: Wait for Deployment to be Ready
        run: kubectl rollout status deployment/${{ needs.main.outputs.app_name }} -n ${{ inputs.namespace }}
      - name: Wait for Pod to be Ready
        run: |
          echo "Waiting for pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app=${{ needs.main.outputs.app_name }} -n ${{ inputs.namespace }} --timeout=300s
          jupyter_pod=$(kubectl get pods -n ${{ inputs.namespace }} -l app=${{ needs.main.outputs.app_name }} --field-selector=status.phase=Running -o jsonpath="{.items[0].metadata.name}")
          echo "jupyter_pod=$jupyter_pod" | tee -a $OUTPUTS
      - name: Wait for LoadBalancer Service to Get External IP
        run: |
          echo "Waiting for external IP..."
          while true; do
            ext_ip=$(kubectl get svc -n ${{ inputs.namespace }} ${{ needs.main.outputs.app_name }}-lb -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null)
            if [[ -n "$ext_ip" && "$ext_ip" != "<none>" ]]; then
              echo "External IP found: $ext_ip"
              break
            fi
            sleep 5
          done
          echo "ext_ip=$ext_ip" | tee -a $OUTPUTS
      - name: Get Jupyter URL
        env:
          ext_ip: ${{ needs.main.outputs.ext_ip }}
          jupyter_pod: ${{ needs.main.outputs.jupyter_pod }}
        run: |
          k8s_port="${{ inputs.k8sPort }}"
          JUPYTER_URL=""
          while [[ -z "$JUPYTER_URL" || "$JUPYTER_URL" == "<none>" ]]; do
            echo "Waiting for Jupyter URL..."
            sleep 5
            JUPYTER_URL=$(kubectl logs -n ${{ inputs.namespace }} $jupyter_pod 2>&1 | grep -oE "http://[0-9a-zA-Z.:]+:${k8s_port}/.*" | tail -n1  )
            if [[ -z "$JUPYTER_URL" || "$JUPYTER_URL" == "<none>" ]]; then
              echo "Still waiting for Jupyter URL..."
              sleep 5
            fi
          done
          echo ${JUPYTER_URL} 
          SLUG=$(echo ${JUPYTER_URL} | sed "s#http://[0-9a-zA-Z.:]\+:${k8s_port}##")
          JUPYTER_URL="http://${ext_ip}:${k8s_port}${SLUG}"
          echo "JUPYTER_URL=${JUPYTER_URL}" | tee -a $OUTPUTS
      - name: Expose port
        uses: parallelworks/update-session
        with:
          name: ${{ sessions.expose }}
          status: running
          type: link
          url: ${{ needs.main.outputs.JUPYTER_URL }}
      - name: Stream Logs
        run: kubectl logs -f deployment/${{ needs.main.outputs.app_name }} -n ${{ inputs.namespace }}
'on':
  execute:
    inputs:
      cluster:
        label: Kubernetes cluster
        type: string
        default: devinfra1
      namespace:
        type: string
        default: pw-qa-test
      image:
        label: Job image
        type: string
        default: jupyter/datascience-notebook
      k8sPort:
        label: Job port
        type: number
        default: 8888
