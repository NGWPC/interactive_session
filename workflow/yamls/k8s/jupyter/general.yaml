permissions:
  - '*'

sessions:
  session:
    redirect: true

app:
  target: inputs.cluster

jobs:
  auth:
    steps:
      - name: Authenticate kubectl
        run: pw kube auth ${{ inputs.cluster }}
  k8s_deployment:
    needs:
      - auth
    steps:
      - name: Defining App Name
        run: |
          job_number=$(pwd | rev | cut -d "/" -f1 | rev)
          workflow_name=$(pwd | rev | cut -d "/" -f2 | rev)
          app_name="${PW_USER}-${workflow_name}-${job_number}"
          echo "app_name=${app_name}" | tee -a $OUTPUTS | tee -a OUTPUTS
      - name: Creating Deployment and Service YAML
        run: |
          cat <<EOF > app.yaml

          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ${{ needs.k8s_deployment.outputs.app_name }}-cm
            namespace: ${{ inputs.namespace }}
          data:
            config.conf: |
              server {
                listen 8889;
                server_name _;
                index index.html index.htm index.php;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';
                add_header X-Frame-Options "ALLOWALL";
                client_max_body_size 1000M;
                location / {
                    proxy_pass http://127.0.0.1:${{ inputs.k8sPort }}/me/session/${PW_USER}/${{ sessions.session }}/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header Host \$http_host;
                    proxy_set_header X-NginX-Proxy true;
                }
              }

          ---

          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ needs.k8s_deployment.outputs.app_name }}
            namespace: ${{ inputs.namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${{ needs.k8s_deployment.outputs.app_name }}
            template:
              metadata:
                labels:
                  app: ${{ needs.k8s_deployment.outputs.app_name }}
              spec:
                containers:
                  - name: ${{ needs.k8s_deployment.outputs.app_name }}
                    image: ${{ inputs.image }}
                    ports:
                      - containerPort: ${{ inputs.k8sPort }}

                    command: ["start-notebook.sh"]
                    args:
                      - "--ServerApp.trust_xheaders=True"
                      - "--ServerApp.allow_origin='*'"
                      - "--ServerApp.allow_remote_access=True"
                      - "--ServerApp.base_url='/me/session/${PW_USER}/${{ sessions.session }}/'"
                  - name: nginx
                    image: nginxinc/nginx-unprivileged:1.25.3
                    ports:
                      - containerPort: 8889
                    volumeMounts:
                      - name: ${{ needs.k8s_deployment.outputs.app_name }}-cm-volume
                        mountPath: /etc/nginx/conf.d
                volumes:
                  - name: ${{ needs.k8s_deployment.outputs.app_name }}-cm-volume
                    configMap:
                      name: ${{ needs.k8s_deployment.outputs.app_name }}-cm
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ needs.k8s_deployment.outputs.app_name }}-lb
            namespace: ${{ inputs.namespace }}
          spec:
            selector:
              app: ${{ needs.k8s_deployment.outputs.app_name }}
            ports:
              - protocol: TCP
                port: 8889
                targetPort: 8889
          EOF
      - name: Dry Run Deployment
        run: |
          echo "Performing dry run..."
          kubectl apply -f app.yaml --dry-run=client
      - name: Apply Deployment and Service
        run: kubectl apply -f app.yaml
        cleanup: |
          kubectl delete -f app.yaml
          touch cleanup.completed
      - name: Wait for Deployment to be Ready
        env: 
          app_name: ${{ needs.k8s_deployment.outputs.app_name }}
          namespace: ${{ inputs.namespace }}
        run: kubectl wait --for=condition=available --timeout=120s deployment/${app_name} -n ${namespace} 
      - name: Wait for Pod to be Ready
        run: |
          echo "Waiting for pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app=${{ needs.k8s_deployment.outputs.app_name }} -n ${{ inputs.namespace }} --timeout=300s
          jupyter_pod=$(kubectl get pods -n ${{ inputs.namespace }} -l app=${{ needs.k8s_deployment.outputs.app_name }} --field-selector=status.phase=Running -o jsonpath="{.items[0].metadata.name}")
          echo "jupyter_pod=$jupyter_pod" | tee -a $OUTPUTS | tee -a OUTPUTS
      - name: Stream Logs
        run: |
          touch ready_to_create_session
          kubectl logs -f deployment/${{ needs.k8s_deployment.outputs.app_name }} -n ${{ inputs.namespace }}
  create_session:
    needs:
      - auth
    steps:
      - name: Wait until the Kubernetes deployment reaches its final stage
        run: |
          while true; do
            if [ -f "cleanup.completed" ]; then
              echo "File cleanup.completed was detected. Exiting..."
              exit 0
            elif [ -f "ready_to_create_session" ]; then
              echo "Deployment is ready"
              break
            fi
            sleep 2  # Check every second
          done
      - name: Get Service Name
        run: |
          source OUTPUTS
          echo "service_name=${app_name}-lb" | tee -a $OUTPUTS
      - name: Get SLUG
        run: |
          source OUTPUTS
          k8s_port="${{ inputs.k8sPort }}"
          JUPYTER_URL=""
          while [[ -z "$JUPYTER_URL" || "$JUPYTER_URL" == "<none>" ]]; do
            JUPYTER_URL=$(kubectl logs -n ${{ inputs.namespace }} $jupyter_pod 2>&1 | grep -oE "http://[0-9a-zA-Z.:]+:${k8s_port}/.*" | tail -n1  )
            if [[ -z "$JUPYTER_URL" || "$JUPYTER_URL" == "<none>" ]]; then
              echo "Still waiting for Jupyter URL..."
              sleep 5
            fi
          done
          echo ${JUPYTER_URL} 
          slug=$(echo ${JUPYTER_URL} | sed "s#http://[0-9a-zA-Z.:]\+:${k8s_port}##" | sed "s|/me/session/${PW_USER}/${{ sessions.session }}/||g")
          echo "slug=${slug}" | tee -a $OUTPUTS
      - name: Expose port
        uses: parallelworks/update-session
        with:
          remotePort: '8889'
          name: ${{ sessions.session }}
          slug: ${{ needs.create_session.outputs.slug }}
          targetInfo:
            name: ${{ inputs.cluster }}
            namespace: ${{ inputs.namespace }}
            resourceType: services
            resourceName: ${{ needs.create_session.outputs.service_name }}


'on':
  execute:
    inputs:
      cluster:
        label: Kubernetes cluster
        type: kubernetes-clusters
      namespace:
        label: Namespace
        type: kubernetes-namespaces
        clusterName: ${{ inputs.cluster }}
      image:
        label: Job image
        type: string
        default: jupyter/datascience-notebook
      k8sPort:
        label: Job port
        type: number
        default: 8888
