
parseArgs() {

while true; do
    case "$1" in
    --*)
      n="$(echo $1 | sed s/--//)"
      v="$2"
      eval $(echo export $n=$v)
      shift 2;;
    *)
      break
    esac
done

}

# get a unique open port
getOpenPort() {

minPort=50000
maxPort=50100

qty=1
count=0
for i in $(seq $minPort $maxPort); do
    out=$(netstat -aln | grep LISTEN | grep $i)
    if [[ "$out" == "" ]];then
        openPort=$(echo $i)
        (( ++ count ))
    fi
    if [[ "$count" == "$qty" ]];then
        break
    fi
done

}

processPoolProperties() {

PYCMD=$(cat <<'EOF'
import subprocess
import os,sys,logging
from pprint import pprint

import warnings
from cryptography.utils import CryptographyDeprecationWarning
warnings.filterwarnings("ignore", category=CryptographyDeprecationWarning)

def bash(script,*args,checkrc=False,debug=False):

    cmd = ['bash', '-s', *args]

    result = subprocess.run(cmd, input=script, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding='utf-8')
    if debug: print('DB: bash(): subprocess.run returned: ' + str(result))

    rc = result.returncode
    if debug:  print('DB: bash(): command exit code: ' + str(rc))

    cmd_output = result.stdout
    if debug: print('DB: bash(): command output: ' + str(cmd_output))

    return (rc, cmd_output)

#try:

swift_conf      = 'pw.conf'

try:
    script = r'''
    set -o pipefail
    sed -e 's/{{//g;s/}}//g;s/"//g;s/: / /;s/^ +//' < {0} |
        awk '
            /^site\./   {{ gsub(/^site./,"",$1); site=$1 }}
            /  URL/     {{ print(site " " $2) }}
            '
    '''.format(swift_conf)
except:
    pass

(rc,output) = bash(script)

#print(rc)

pools=[]
poolinfo={}
for line in output.splitlines():
    fields = line.split()
    poolname = fields[0]
    service = fields[1].split(':')
    host = service[1][2:] # skip over // from protocol
    port = service[2]
    pools.append(poolname)
    poolinfo[poolname]={'host':host,'port':port}

#print(pools)
#print('poolinfo',poolinfo)

# get the session number
rc,output = bash('echo $(basename $(ls -1 /tmp/pworks/pools/$(whoami)/%s/lastid=* | tail -n1)) | sed "s/lastid=//"' % pools[0])
session = output.splitlines()[0]

#print('session',session)

rc,pool_properties = bash('echo /tmp/pworks/pools/$(whoami)/%s/%s/pool.properties' % (pools[0],session))

with open(pool_properties.splitlines()[0]) as f:
    output = f.read()

props={}
for line in output.splitlines():
    fields = line.split('=')
    name=fields[0]
    try:
        value=fields[1]
        props[name]=value
    except:
        pass

def get_coaster_properties(pfile,props):
    with open(pfile) as f:
        for line in f:
            line = line.rstrip().split('#',1)[0]
            toks = line.split(':',maxsplit=1)
            if len(toks) == 2:
                name = toks[0].lstrip().rstrip()
                val = toks[1].lstrip().rstrip()
                if len(val) >= 2 and ((val[0] == "'" and val[-1] == "'") or (val[0] == '"' and val[-1] == '"')):
                    val = val[1:-1]
                props[name] = val
    return props

pwprops = get_coaster_properties(swift_conf,props)

import json
print(json.dumps(pwprops))

EOF
)

poolProperties="$(python -c "$PYCMD")"

}

getResourceInfo() {

PYCMD=$(cat <<'EOF'
import os
import requests
from time import sleep

# Gets pool name from pw.conf
def get_pool_name():
    with open("pw.conf") as fp:
        Lines = fp.readlines()
        for line in Lines:
            if 'sites' in line:
                return line.split('[')[1].split(']')[0]

# Get main host from pw.conf like go.parallel.works or noaa.parallel.works
def get_main_host():
    with open("pw.conf") as fp:
        Lines = fp.readlines()
        for line in Lines:
            if 'MAIN_HOST' in line:
                return line.replace('MAIN_HOST:"','').replace('"','').strip()
    # FIXME: MAIN_HOST is still not included in pw.conf in go
    return 'https://go.parallel.works/'


def get_pool_info(pool_name, url_resources, retries = 3):
    while retries >= 0:
        res = requests.get(url_resources)
        for pool in res.json():
            # FIXME: BUG sometimes pool['name'] is None when you just started the pool
            if type(pool['name']) == str:
                if pool['name'].replace('_','') == pool_name.replace('_',''):
                    return pool
        print('Retrying get_pool_info({}, {}, retries = {})'.format(pool_name, url_resources, str(retries)))
        sleep(3)
        retries += -1
    raise(Exception('Pool name not found response: ' + pool_name))

# Get the IP of the master node in the pool
def get_master_node_ip():
    pool_name = get_pool_name()
    url_resources = get_main_host() +"/api/resources?key=" + os.environ['PW_API_KEY']
    while True:
        cluster = get_pool_info(pool_name, url_resources)

        if cluster['status'] == 'on':
            if 'masterNode' in cluster['state']:
                ip = cluster['state']['masterNode']
            else:
                ip = None

            if ip is None:
                #print('Waiting for cluster {} to get an IP'.format(pool_name), flush = True)
                pass
            else:
                return ip
        else:
            #print('Waiting for cluster {} status to be on'.format(pool_name), flush = True)
            #print('Cluster status: ' + cluster['status'])
            pass

        sleep(20)


def is_coaster_pool():
    coaster_pools = ['awssh', 'gce', 'azure']
    pool_name = get_pool_name()
    url_resources = get_main_host() +"/api/resources?key=" + os.environ['PW_API_KEY']
    res = requests.get(url_resources)
    pool_info = get_pool_info(pool_name, url_resources)
    if pool_info['type'] in coaster_pools:
        return True
    else:
        return False

print(get_master_node_ip())

EOF
)

submitHostIp=$(python -c "$PYCMD")

}


# Replaces inputs in the format
# --a 1 --b 2 --c 3
# with
# sed -i "s|__a__|1|g" ${script}
# sed -i "s|__b__|2|g" ${script}
# sed -i "s|__c__|3|g" ${script}
replace_templated_inputs() {
    echo Replacing templated inputs
    script=$1
    index=1
    for arg in $@; do
        prefix=$(echo "${arg}" | cut -c1-2)
	    if [[ ${prefix} == '--' ]]; then
	        pname=$(echo $@ | cut -d ' ' -f${index} | sed 's/--//g')
	        pval=$(echo $@ | cut -d ' ' -f$((index + 1)))
	        # To support empty inputs (--a 1 --b --c 3)
	        if [ ${pval:0:2} != "--" ]; then
                echo "    sed -i \"s|__${pname}__|${pval}|g\" ${script}"
		        sed -i "s|__${pname}__|${pval}|g" ${script}
	        fi
	    fi
        index=$((index+1))
    done
}
